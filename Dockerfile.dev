# =========================
# 🧱 Base stage: dev環境構築
# =========================
FROM node:24-bookworm AS base

ARG UID=2000
ARG GID=2000
ARG USERNAME=devuser

ENV CARGO_HOME="/cargo"
ENV PATH="${CARGO_HOME}/bin:$PATH"

# 必要なパッケージをインストール
RUN apt-get update && apt-get install -y \
    sudo git curl build-essential pkg-config \
    libssl-dev libudev-dev libx11-dev libxrandr-dev libxss-dev libxtst-dev libxi-dev \
    libgl1-mesa-dev libgtk-3-dev libwebkit2gtk-4.1-dev libjavascriptcoregtk-4.1-dev \
    libayatana-appindicator3-dev libglib2.0-dev libgdk-pixbuf2.0-dev libpango1.0-dev \
    libatk1.0-dev libcairo2-dev libsoup2.4-dev librsvg2-dev

# devuser 作成
RUN groupadd -g ${GID} ${USERNAME} \
 && useradd -u ${UID} -g ${GID} -m ${USERNAME} -s /bin/bash \
 && echo "${USERNAME} ALL=(ALL) NOPASSWD:ALL" > /etc/sudoers.d/${USERNAME} \
 && chmod 0440 /etc/sudoers.d/${USERNAME}

# グローバルツールインストール（rootで）
RUN npm install -g pnpm \
 && curl https://sh.rustup.rs -sSf | sh -s -- -y \
 && rustup default stable

WORKDIR /src

# =========================
# 📦 Dependencies stage
# =========================
FROM base AS deps

# devuser に切り替え
ARG UID=2000
ARG GID=2000
ARG USERNAME=devuser

RUN chown -R ${USERNAME}:${USERNAME} /src
RUN chown -R ${USERNAME}:${USERNAME} /cargo
USER ${USERNAME}

WORKDIR /src

# 依存ファイルコピー
COPY --chown=${UID}:${GID} package.json pnpm-lock.yaml ./

# キャッシュマウント + install（devuserで）
RUN --mount=type=cache,id=pnpm_store,target=/src/.pnpm-store \
    pnpm install --frozen-lockfile

# ソースコードコピー
COPY --chown=${UID}:${GID} . .

# Rust toolchain確認（devuserで）
RUN /cargo/bin/rustup default stable

# 環境変数とポート設定
ENV PORT=8080
EXPOSE 8080

CMD ["pnpm", "dev"]

# =========================
# 🔨 Builder stage（任意）
# =========================
# FROM deps AS builder
# RUN pnpm build || pnpm tauri build

# =========================
# 🚀 Runtime stage（任意）
# =========================
# FROM node:24-bookworm AS runtime
# ARG UID=2000
# ARG GID=2000
# ARG USERNAME=devuser
# RUN groupadd -g ${GID} ${USERNAME} \
#  && useradd -u ${UID} -g ${GID} -m ${USERNAME} -s /bin/bash
# USER ${USERNAME}
# WORKDIR /app
# COPY --from=builder /src/dist ./dist
# EXPOSE 8080
# CMD ["node", "dist/server.js"]