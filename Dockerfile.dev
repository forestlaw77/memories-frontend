# Node.js Alpine ベースイメージを使用
FROM node:22-alpine

# ビルド引数としてUIDとGIDを受け取る
ARG UID=1000
ARG GID=1000
ARG USERNAME=devuser

# 必要なパッケージをインストール
RUN apk update && apk add --no-cache \
    #sudo \
    bash \
    shadow \
    git \
    && rm -rf /var/cache/apk/*

# pnpm のホームディレクトリを設定
ENV PNPM_HOME="/pnpm"
ENV PATH="$PNPM_HOME:$PATH"

# pnpm をインストール
RUN npm install -g pnpm

# PNPM_HOME ディレクトリを作成し、GIDとUIDの所有にする
RUN mkdir -p ${PNPM_HOME} \
    && addgroup -g ${GID} ${USERNAME} || true \
    && adduser -D -u ${UID} -G ${USERNAME} -s /bin/bash ${USERNAME} || true \
    && chown -R ${UID}:${GID} ${PNPM_HOME}

# 作業ディレクトリを設定
WORKDIR /src

RUN chown -R ${UID}:${GID} /src

# デフォルトユーザーを 'devuser' に設定
# これ以降のRUNコマンドやCMDは、このユーザーで実行される
USER ${UID}



# package.json と pnpm-lock.yaml を先にコピーして、依存関係のキャッシュを効率的に利用
COPY package.json pnpm-lock.yaml ./

# 開発用依存関係をインストール
# --mount=type=cache を利用して、pnpm のストアをキャッシュする
# これにより、次回以降のビルドが高速化される
RUN --mount=type=cache,id=pnpm_dev_store,target=${PNPM_HOME}/.pnpm-store pnpm install --frozen-lockfile
RUN pnpm config set store-dir ${PNPM_HOME}/.pnpm-store

# 開発モードに設定
ENV NODE_ENV=development

# ソースコードをコピー
COPY . .

# 環境変数とポート設定
ENV PORT=8080
EXPOSE 8080

# アプリケーションを起動
CMD ["pnpm", "dev"]

